.grid {
  /* grid items are placed in row default */

  /* and span the full width of grid size */

  display: grid;
  background: blue;
  color: red;

  /* Defines the columns and rows of the grid with a space-separated list of values. */

  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
}

.inline-grid {
  /* grid items are placed in row default */

  /* and span the full width of child element*/

  display: inline-grid;
  background: sienna;
  color: white;

  /* repeat function for repeating values */

  grid-template-columns: repeat(3, 33.33% [col-start]);
}

.grid-2 {
  /* grid items are placed in row default */

  /* and span the full width of grid size */

  display: grid;
  background: salmon;
  color: white;

  /* hides the overflow */

  overflow: hidden;

  /* Defines the columns and rows of the grid with a space-separated list of values. */

  grid-template-columns: [first] 20vw [line2] 20vh [line3] auto [line4] 10vw [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
}

.item-1 {
  /* tells from whhere element will start in column*/
  grid-column-start: line2;
}

.item-2 {
  grid-column-start: line4;
  grid-row-start: row1-end;
}

.item-3 {
  grid-column-start: line3;
  grid-row-start: row1-end;
}

.fraction-grid {
  display: grid;

  /* ditribute the columns in fraction like 1fr 1fr 
    1fr distribute the columns in 1/3 rd of the width available */

  grid-template-columns: 1fr 1fr 1fr;
  background-color: yellowgreen;
}
.template-area {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: auto;
  background-color: white;

  /* defines the name of an area */

  grid-template-areas:
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}
.item-a {
  /* template area decleration */

  grid-area: header;
  width: auto;
  height: 85px;
  background-color: greenyellow;
}
.template-area,
.grid-gurtter h1 {
  text-align: center;
}
.item-b {
  /* template area decleration */
  grid-area: main;
  width: auto;
  height: 200px;
  background-color: sandybrown;
}
.item-c {
  /* template area decleration */

  grid-area: sidebar;
  width: auto;
  height: 200px;
  background-color: hotpink;
}
.item-d {
  /* template area decleration */

  grid-area: footer;
  width: auto;
  height: 85px;
  background-color: cornflowerblue;
}

.grid-gutter {
  display: grid;
  grid-template-columns: 0.8fr 0.8fr 0.8fr 0.8fr;
  grid-template-rows: auto;
  background-color: black;
  grid-template-areas:
    "header header header header"
    "main main . sidebar" "footer footer footer footer";

  /* define the gap between the columns and row normally called gutter */

  column-gap: 15px;
  row-gap: 10px;
}
.jus-items {
  width: 100px;
  height: 100px;
  background-color: crimson;
}
.grid-justify-items {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: auto;
  column-gap: 10px;
  row-gap: 10px;
}
.grid-justify-items-1 {
  /* center = at center  */
  justify-items: center;
}
.grid-justify-items-2 {
  /* end = at end  */
  justify-items: end;
}
.grid-justify-items-3 {
  /* start = from start  */
  justify-items: start;
}

.align-items {
  width: 100px;
  height: 30px;
  background-color: slateblue;
}
.grid-align-items {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 60px 60px 60px;
  column-gap: 10px;
  row-gap: 10px;
  background-color: gray;
}
.grid-align-items-1 {
  /* center = at center  */
  align-items: center;
}
.grid-align-items-2 {
  /* end = at end  */
  align-items: end;
}
.grid-align-items-3 {
  /* start = from start  */
  align-items: start;
}
/* 
   place item place both align item and justify item in single 
   like place-item : <align-itme> / <justify-item> */

/* sometimes the total size of grid is less then the size of grid
   so we have to do the .justify-content  space column wise*/

.container {
  width: 80vw;
  height: 500px;
}
.grid-justify-content {
  display: grid;
  grid-template-columns: 20vw 20vw 20vw;
  grid-template-rows: 100px 100px 100px;
  background: greenyellow;
}
.justify-content {
  width: 50px;
  height: 50px;
  background-color: indigo;
}

.grid-justify-content-s {
  place-items: start start;
  justify-content: start;
}

.grid-justify-content-e {
  place-items: end end;
  justify-content: end;
}
.grid-justify-content-c {
  place-items: center center;
  justify-content: center;
}
.grid-justify-content-sb {
  place-items: center end;
  justify-content: space-between;
}
.grid-justify-content-sa {
  place-items: center start;
  justify-content: space-around;
}
.grid-justify-content-se {
  place-items: stretch center;
  justify-content: space-evenly;
}

/* sometimes the total size of grid is less then the size of grid
   so we have to do the .align-content  space row wise*/

.container2 {
  width: 75vw;
  height: 400px;
}
.grid-align-content {
  display: grid;
  grid-template-columns: 25vw 25vw 25vw;
  grid-template-rows: 100px 100px 100px;
  background: khaki;
}
.align-content {
  width: 50px;
  height: 50px;
  background-color: aquamarine;
}

.grid-align-content-s {
  place-items: start start;
  align-content: start;
}

.grid-align-content-e {
  place-items: end end;
  align-content: end;
}
.grid-align-content-c {
  place-items: center center;
  align-content: center;
}
.grid-align-content-sb {
  place-items: center end;
  align-content: space-between;
}
.grid-align-content-sa {
  place-items: center start;
  align-content: space-around;
}
.grid-align-content-se {
  place-items: stretch center;
  align-content: space-evenly;
}

/* place content used for both justify-conetnt and align-content at a time 
   */

/* grid auto column generate */

.container3 {
  width: 100vw;
  height: 50vh;
  background-color: burlywood;
}
.grid3 {
  display: grid;
  grid: 50px 50px/ 50px 50px 50px 50px 50px;
  grid-auto-columns: 10px;

  /* grid overflow property  */

  grid-auto-flow: column;
  column-gap: 15px;
}
.item-x {
  background-color: chartreuse;
  width: 50px;
  height: 50px;
  /* grid-row: 2/3; */
  grid-column: 1/2;
}
.item-y {
  width: 50px;
  height: 50px;
  background-color: crimson;
  /* grid-column: 2/3; */
}
.item-z {
  background-color: cornflowerblue;
  width: 50px;
  height: 50px;
  /* grid-row: 2/3; */
  grid-column: 4/5;
}

/* When sizing rows and columns, you can use all the lengths you are used to, like px, rem, %, etc, but you also have keywords like min-content,
  max-content, auto, and perhaps the most useful, fractional units. grid-template-columns: 200px 1fr 2fr min-content;
  
  You also have access to a function which can help set boundaries for otherwise flexible units. For example to set a column to be 1fr, but shrink no further than 200px: grid-template-columns: 1fr minmax(200px, 1fr);
  There is repeat() function, which saves some typing, like making 10 columns: grid-template-columns: repeat(10, 1fr);
  
  Combining all of these things can be extremely powerful, like grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); */
